$date
	Mon Oct 28 16:33:50 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module xtop_tb $end
$var wire 32 ! r0 [31:0] $end
$var wire 32 " r1 [31:0] $end
$var wire 32 # r10 [31:0] $end
$var wire 32 $ r11 [31:0] $end
$var wire 32 % r12 [31:0] $end
$var wire 32 & r13 [31:0] $end
$var wire 32 ' r14 [31:0] $end
$var wire 32 ( r15 [31:0] $end
$var wire 32 ) r2 [31:0] $end
$var wire 32 * r3 [31:0] $end
$var wire 32 + r4 [31:0] $end
$var wire 32 , r5 [31:0] $end
$var wire 32 - r6 [31:0] $end
$var wire 32 . r7 [31:0] $end
$var wire 32 / r8 [31:0] $end
$var wire 32 0 r9 [31:0] $end
$var wire 1 1 trap $end
$var reg 1 2 clk $end
$var reg 1 3 rst $end
$var integer 32 4 k [31:0] $end
$var integer 32 5 start_time [31:0] $end
$scope module uut $end
$var wire 1 2 clk $end
$var wire 1 3 rst $end
$var wire 1 1 trap $end
$var wire 1 6 regf_sel $end
$var wire 32 7 regf_data_to_rd [31:0] $end
$var wire 9 8 pc [8:0] $end
$var wire 1 9 mem_sel $end
$var wire 32 : mem_data_to_rd [31:0] $end
$var wire 1 ; led_sel $end
$var wire 4 < led_out [3:0] $end
$var wire 32 = instruction [31:0] $end
$var wire 1 > display_sel $end
$var wire 12 ? display_out [11:0] $end
$var wire 1 @ data_we $end
$var wire 32 A data_to_wr [31:0] $end
$var wire 32 B data_to_rd [31:0] $end
$var wire 1 C data_sel $end
$var wire 10 D data_addr [9:0] $end
$var wire 1 E cprt_sel $end
$scope module addr_decoder $end
$var wire 1 C sel $end
$var wire 32 F regf_data_to_rd [31:0] $end
$var wire 32 G mem_data_to_rd [31:0] $end
$var wire 10 H addr [9:0] $end
$var reg 1 E cprt_sel $end
$var reg 32 I data_to_rd [31:0] $end
$var reg 1 > display_sel $end
$var reg 1 ; led_sel $end
$var reg 1 9 mem_sel $end
$var reg 1 6 regf_sel $end
$var reg 1 1 trap_sel $end
$upscope $end
$scope module controller $end
$var wire 1 J alu_arith_ops $end
$var wire 1 K alu_imm_ops $end
$var wire 1 L alu_logic_ops $end
$var wire 1 M alu_mem_ops $end
$var wire 1 N alu_ops $end
$var wire 32 O and_res [31:0] $end
$var wire 1 P branch_ops $end
$var wire 1 2 clk $end
$var wire 1 Q imm_ops $end
$var wire 1 R load_imm_ops $end
$var wire 1 S load_mem_ops $end
$var wire 1 T load_ops $end
$var wire 32 U mem_data_from [31:0] $end
$var wire 32 V mem_data_to [31:0] $end
$var wire 1 C mem_sel $end
$var wire 1 @ mem_we $end
$var wire 1 3 rst $end
$var wire 1 W store_mem_ops $end
$var wire 32 X xor_res [31:0] $end
$var wire 4 Y opcode [3:0] $end
$var wire 32 Z instruction [31:0] $end
$var wire 32 [ imm [31:0] $end
$var reg 32 \ adder_res [31:0] $end
$var reg 1 ] alu_carry $end
$var reg 1 ^ alu_negative $end
$var reg 1 _ alu_overflow $end
$var reg 32 ` alu_result [31:0] $end
$var reg 1 a carry_res_n $end
$var reg 32 b carry_res_n_1 [31:0] $end
$var reg 10 c mem_addr [9:0] $end
$var reg 32 d operand [31:0] $end
$var reg 9 e pc [8:0] $end
$var reg 32 f regA [31:0] $end
$var reg 32 g regB [31:0] $end
$var reg 3 h regC [2:0] $end
$upscope $end
$scope module cprint $end
$var wire 1 2 clk $end
$var wire 8 i data_in [7:0] $end
$var wire 1 j sel $end
$upscope $end
$scope module display $end
$var wire 1 2 clk $end
$var wire 4 k n_display [3:0] $end
$var wire 1 3 rst $end
$var wire 8 l segments [7:0] $end
$var wire 1 m sel $end
$var wire 12 n out [11:0] $end
$var reg 8 o out_aux [7:0] $end
$upscope $end
$scope module led $end
$var wire 1 2 clk $end
$var wire 4 p in [3:0] $end
$var wire 1 3 rst $end
$var wire 1 q sel $end
$var reg 4 r out [3:0] $end
$upscope $end
$scope module ram $end
$var wire 1 2 clk $end
$var wire 9 s data_addr [8:0] $end
$var wire 9 t data_addr_int [8:0] $end
$var wire 1 u data_en_int $end
$var wire 32 v data_in [31:0] $end
$var wire 32 w data_in_int [31:0] $end
$var wire 32 x data_out [31:0] $end
$var wire 1 9 data_sel $end
$var wire 1 @ data_we $end
$var wire 1 y data_we_int $end
$var wire 1 z instr_en $end
$var wire 9 { pc [8:0] $end
$var reg 32 | data_out_int [31:0] $end
$var reg 32 } instruction [31:0] $end
$upscope $end
$scope module regf $end
$var wire 4 ~ addr [3:0] $end
$var wire 1 2 clk $end
$var wire 32 !" data_in [31:0] $end
$var wire 1 6 sel $end
$var wire 1 @ we $end
$var wire 32 "" data_out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx ""
bx !"
bx ~
bx }
bx |
bx {
1z
xy
bx x
bx w
bx v
xu
bx t
bx s
bx r
xq
bx p
b0 o
bx00000000 n
xm
bx l
bx k
xj
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
xa
bx `
x_
x^
x]
bx \
bx [
bx Z
bx Y
bx X
xW
bx V
bx U
xT
xS
xR
xQ
xP
bx O
xN
xM
xL
xK
xJ
bx I
bx H
bx G
bx F
xE
bx D
xC
bx B
bx A
x@
bx00000000 ?
x>
bx =
bx <
x;
bx :
x9
bx 8
bx 7
x6
bx 5
bx 4
03
12
x1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#5000
02
#10000
12
#11000
0_
0^
0]
b0 `
b0 \
0a
b0 b
b0 X
b0 O
b0 l
b0 ?
b0 n
b0 k
b0 i
b0 p
b0 d
b0 8
b0 e
b0 {
b0 w
b0 A
b0 V
b0 v
b0 !"
b0 f
b0 g
b0 h
b0 <
b0 r
13
#15000
02
#20000
0C
b0 7
b0 F
b0 ""
b0 B
b0 I
b0 U
b100000111 \
b100000111 b
b100000111 X
b111 ~
b100000111 t
b100000111 s
01
0>
0E
0;
06
0u
09
b100000111 d
b100000111 D
b100000111 H
b100000111 c
0M
0N
0m
0j
0q
1T
1Q
b100000111 [
0P
0L
0J
0K
0y
0@
0W
0S
1R
b110 Y
b1100000000000000000000100000111 =
b1100000000000000000000100000111 Z
b1100000000000000000000100000111 }
12
#21000
b10000 4
b10101 5
03
#25000
02
#30000
b1000001110 \
b1000001110 b
b0 X
b100000111 O
b111 l
b100000000 ?
b100000000 n
b1 k
b111 i
b111 p
b1 8
b1 e
b1 {
b100000111 w
b100000111 A
b100000111 V
b100000111 v
b100000111 !"
b100000111 f
12
#35000
02
#40000
1m
1>
1C
b100000111 \
b100000111 b
b100000111 X
b0 O
b0 ~
b1100000 t
b1100000 s
b0 d
b1001100000 D
b1001100000 H
b1001100000 c
0T
0Q
b1001100000 [
1y
1@
1W
0R
b1001 Y
b10 8
b10 e
b10 {
b10010000000000000000001001100000 =
b10010000000000000000001001100000 Z
b10010000000000000000001001100000 }
12
#45000
02
#50000
0m
b1111 ~
b111111111 t
b111111111 s
11
0>
b1111111111 D
b1111111111 H
b1111111111 c
b1111111111 [
b11 8
b11 e
b11 {
b110101010 ?
b110101010 n
b10101010 o
b10010000000000000000001111111111 =
b10010000000000000000001111111111 Z
b10010000000000000000001111111111 }
12
#55000
02
#60000
0C
b0 B
b0 I
b0 U
b0 ~
b0 t
b0 s
0u
09
01
b100000111 `
1N
b0 D
b0 H
b0 c
1J
1Q
b0 [
1K
0y
0@
0W
b0 Y
b100 8
b100 e
b100 {
b0 =
b0 Z
b0 }
12
