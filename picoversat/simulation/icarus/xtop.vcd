$date
	Mon Oct 21 16:22:18 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module xtop_tb $end
$var wire 32 ! r0 [31:0] $end
$var wire 32 " r1 [31:0] $end
$var wire 32 # r10 [31:0] $end
$var wire 32 $ r11 [31:0] $end
$var wire 32 % r12 [31:0] $end
$var wire 32 & r13 [31:0] $end
$var wire 32 ' r14 [31:0] $end
$var wire 32 ( r15 [31:0] $end
$var wire 32 ) r2 [31:0] $end
$var wire 32 * r3 [31:0] $end
$var wire 32 + r4 [31:0] $end
$var wire 32 , r5 [31:0] $end
$var wire 32 - r6 [31:0] $end
$var wire 32 . r7 [31:0] $end
$var wire 32 / r8 [31:0] $end
$var wire 32 0 r9 [31:0] $end
$var wire 1 1 trap $end
$var reg 1 2 clk $end
$var reg 1 3 rst $end
$var integer 32 4 k [31:0] $end
$var integer 32 5 start_time [31:0] $end
$scope module uut $end
$var wire 1 2 clk $end
$var wire 1 3 rst $end
$var wire 1 1 trap $end
$var wire 1 6 regf_sel $end
$var wire 32 7 regf_data_to_rd [31:0] $end
$var wire 9 8 pc [8:0] $end
$var wire 1 9 mem_sel $end
$var wire 32 : mem_data_to_rd [31:0] $end
$var wire 1 ; led_sel $end
$var wire 4 < led_out [3:0] $end
$var wire 32 = instruction [31:0] $end
$var wire 1 > data_we $end
$var wire 32 ? data_to_wr [31:0] $end
$var wire 32 @ data_to_rd [31:0] $end
$var wire 1 A data_sel $end
$var wire 10 B data_addr [9:0] $end
$var wire 1 C cprt_sel $end
$scope module addr_decoder $end
$var wire 1 A sel $end
$var wire 32 D regf_data_to_rd [31:0] $end
$var wire 32 E mem_data_to_rd [31:0] $end
$var wire 10 F addr [9:0] $end
$var reg 1 C cprt_sel $end
$var reg 32 G data_to_rd [31:0] $end
$var reg 1 ; led_sel $end
$var reg 1 9 mem_sel $end
$var reg 1 6 regf_sel $end
$var reg 1 1 trap_sel $end
$upscope $end
$scope module controller $end
$var wire 1 H alu_arith_ops $end
$var wire 1 I alu_imm_ops $end
$var wire 1 J alu_logic_ops $end
$var wire 1 K alu_mem_ops $end
$var wire 1 L alu_ops $end
$var wire 32 M and_res [31:0] $end
$var wire 1 N branch_ops $end
$var wire 1 2 clk $end
$var wire 1 O imm_ops $end
$var wire 1 P load_imm_ops $end
$var wire 1 Q load_mem_ops $end
$var wire 1 R load_ops $end
$var wire 32 S mem_data_from [31:0] $end
$var wire 32 T mem_data_to [31:0] $end
$var wire 1 A mem_sel $end
$var wire 1 > mem_we $end
$var wire 1 3 rst $end
$var wire 1 U store_mem_ops $end
$var wire 32 V xor_res [31:0] $end
$var wire 4 W opcode [3:0] $end
$var wire 32 X instruction [31:0] $end
$var wire 32 Y imm [31:0] $end
$var reg 32 Z adder_res [31:0] $end
$var reg 1 [ alu_carry $end
$var reg 1 \ alu_negative $end
$var reg 1 ] alu_overflow $end
$var reg 32 ^ alu_result [31:0] $end
$var reg 1 _ carry_res_n $end
$var reg 32 ` carry_res_n_1 [31:0] $end
$var reg 10 a mem_addr [9:0] $end
$var reg 32 b operand [31:0] $end
$var reg 9 c pc [8:0] $end
$var reg 32 d regA [31:0] $end
$var reg 32 e regB [31:0] $end
$var reg 3 f regC [2:0] $end
$upscope $end
$scope module cprint $end
$var wire 1 2 clk $end
$var wire 8 g data_in [7:0] $end
$var wire 1 h sel $end
$upscope $end
$scope module led $end
$var wire 1 2 clk $end
$var wire 4 i in [3:0] $end
$var wire 1 3 rst $end
$var wire 1 j sel $end
$var reg 4 k out [3:0] $end
$upscope $end
$scope module ram $end
$var wire 1 2 clk $end
$var wire 9 l data_addr [8:0] $end
$var wire 9 m data_addr_int [8:0] $end
$var wire 1 n data_en_int $end
$var wire 32 o data_in [31:0] $end
$var wire 32 p data_in_int [31:0] $end
$var wire 32 q data_out [31:0] $end
$var wire 1 9 data_sel $end
$var wire 1 > data_we $end
$var wire 1 r data_we_int $end
$var wire 1 s instr_en $end
$var wire 9 t pc [8:0] $end
$var reg 32 u data_out_int [31:0] $end
$var reg 32 v instruction [31:0] $end
$upscope $end
$scope module regf $end
$var wire 4 w addr [3:0] $end
$var wire 1 2 clk $end
$var wire 32 x data_in [31:0] $end
$var wire 1 6 sel $end
$var wire 1 > we $end
$var wire 32 y data_out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx y
bx x
bx w
bx v
bx u
bx t
1s
xr
bx q
bx p
bx o
xn
bx m
bx l
bx k
xj
bx i
xh
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
x_
bx ^
x]
x\
x[
bx Z
bx Y
bx X
bx W
bx V
xU
bx T
bx S
xR
xQ
xP
xO
xN
bx M
xL
xK
xJ
xI
xH
bx G
bx F
bx E
bx D
xC
bx B
xA
bx @
bx ?
x>
bx =
bx <
x;
bx :
x9
bx 8
bx 7
x6
bx 5
bx 4
03
12
x1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#5000
02
#10000
12
#11000
0]
0\
0[
b0 ^
b0 Z
0_
b0 `
b0 V
b0 M
b0 g
b0 i
b0 b
b0 8
b0 c
b0 t
b0 p
b0 ?
b0 T
b0 o
b0 x
b0 d
b0 e
b0 f
b0 <
b0 k
13
#15000
02
#20000
0A
b0 7
b0 D
b0 y
b0 @
b0 G
b0 S
b1111 Z
b1111 `
b1111 V
b1111 w
b1111 m
b1111 l
01
0C
0;
06
0n
09
b1111 b
b1111 B
b1111 F
b1111 a
0K
0L
0h
0j
1R
1O
b1111 Y
0N
0J
0H
0I
0r
0>
0U
0Q
1P
b110 W
b1100000000000000000000000001111 =
b1100000000000000000000000001111 X
b1100000000000000000000000001111 v
12
#21000
b10000 4
b10101 5
03
#25000
02
#30000
b11110 Z
b11110 `
b0 V
b1111 M
b1111 g
b1111 i
b1 8
b1 c
b1 t
b1111 p
b1111 ?
b1111 T
b1111 o
b1111 x
b1111 d
12
#35000
02
#40000
1j
1;
1A
b1111 Z
b1111 `
b1111 V
b0 M
b1010 w
b1011010 m
b1011010 l
b0 b
b1001011010 B
b1001011010 F
b1001011010 a
0R
0O
b1001011010 Y
1r
1>
1U
0P
b1001 W
b10 8
b10 c
b10 t
b10010000000000000000001001011010 =
b10010000000000000000001001011010 X
b10010000000000000000001001011010 v
12
#45000
02
#50000
0j
b1111 w
b111111111 m
b111111111 l
11
0;
b1111111111 B
b1111111111 F
b1111111111 a
b1111111111 Y
b11 8
b11 c
b11 t
b1111 <
b1111 k
b10010000000000000000001111111111 =
b10010000000000000000001111111111 X
b10010000000000000000001111111111 v
12
#55000
02
#60000
0A
b0 @
b0 G
b0 S
b0 w
b0 m
b0 l
0n
09
01
b1111 ^
1L
b0 B
b0 F
b0 a
1H
1O
b0 Y
1I
0r
0>
0U
b0 W
b100 8
b100 c
b100 t
b0 =
b0 X
b0 v
12
